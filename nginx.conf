# This NGINX configuration file sets up a reverse proxy server that forwards requests to different backend servers (lemmy and
# lemmy-ui) based on request headers and URL paths. The server also adds security headers, enables gzip compression, and sets
# various other configurations for optimal performance

# Defines the resources used and number of simultaneous connections
worker_processes 1;
events {
    worker_connections 1024;
}

# The http section is where the actual reverse proxy is defined
http {

    # Here two upstream server groups are defined, lemmy and lemmy-ui
    upstream lemmy {
        # this needs to map to the lemmy (server) docker service hostname
        server "lemmy:8536";
    }
    upstream lemmy-ui {
        # this needs to map to the lemmy-ui docker service hostname
        server "lemmy-ui:1234";
    }

    # Defining the server
    server {
        # this is the nginx port inside docker, docker compose will map it to the external world 
        listen 80;
        # assigns server name to localhost, I do not know if this changes anything
        server_name ${SERVER_NAME};
        # disables the server token response headers, which helps conceal server information from clients
        server_tokens off;

        # this block configures gzip to compress response data when possible to increase performance
        # enables gzip
        gzip on;
        # defines types of files that should be compressed when sent to clients
        gzip_types text/css application/javascript image/svg+xml;
        # adds "Vary: Accept-Encoding" header to responses, indicating that the response may vary based on client's request
        gzip_vary on;

        # this sets upload limit size for client request, relevant for pictures
        client_max_body_size 20M;

        # Add security-related headers to the responses send by the server
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # The routing to each server group happens in this section below, only one "location" block will be executed for a given
        # request. NGINX selects the location block that best matches the requested URL. If both locations match the first one
        # on the file is used.

        # This block matches any request that starts with "/", most likely a frontend request
        location / {
            # distinguish between ui requests and backend
            # don't change lemmy-ui or lemmy here, they refer to the upstream definitions on top
            set $proxpass "http://lemmy-ui";

            if ($http_accept = "application/activity+json") {
              set $proxpass "http://lemmy";
            }
            if ($http_accept = "application/ld+json; profile=\"https://www.w3.org/ns/activitystreams\"") {
              set $proxpass "http://lemmy";
            }
            if ($request_method = POST) {
              set $proxpass "http://lemmy";
            }
            proxy_pass $proxpass;
            
            # removes trailing slashes from the requested URLs with a permanent redirect (301)
            rewrite ^(.+)/+$ $1 permanent;

            # the proxy_set_headers lines pass additional headers to the upstream server, 
            # including the client's IP address and the original host requested by the client
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # This block matches requests that start with "/api", "/pictrs", "/feeds", "/nodeinfo", or "/.well-known", a backend request
        location ~ ^/(api|pictrs|feeds|nodeinfo|.well-known) {
            proxy_pass "http://lemmy";
            # proxy common stuff
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Send actual client IP upstream
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
